/*
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.
*/
/*
Runtime: 92 ms, faster than 93.53% of C# online submissions for Search Insert Position.
Memory Usage: 24 MB, less than 5.26% of C# online submissions for Search Insert Position.
*/
namespace Leetcode
{
    public class Solution
    {
        public int SearchInsert(int[] nums, int target)
        {
            for (int i = 0; i < nums.Length ; i++)
            {
                if (target <= nums[i])
                    return i;
            }
            return nums.Length;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var solution = new Solution();
            var intArr = new int[] {1, 3, 5, 6};
            var result = solution.SearchInsert(intArr, 0);// "issip");
        }
    }
}
Memory Usage: 24 MB, less than 5.26% of C# online submissions for Search Insert Position.
Memory Usage: 24 MB, less than 5.26% of C# online submissions for Search Insert Position.
