/*
34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
*/
/*
Runtime: 244 ms, faster than 88.04% of C# online submissions for Find First and Last Position of Element in Sorted Array.
Memory Usage: 32.2 MB, less than 14.29% of C# online submissions for Find First and Last Position of Element in Sorted Array.
*/

    public class Solution
    {
        public static int FirstOccurence(int[] nums, int low, int high, int target)
        {
            if (low > high) return -1;

            int mid = low + (high - low) / 2;

            if ((mid == 0 || target > nums[mid - 1]) && nums[mid] == target)
                return mid;

            else if (target > nums[mid])
                return FirstOccurence(nums, (mid + 1), high, target);

            else
                return FirstOccurence(nums, low, (mid - 1), target);
        }

        public static int LastOccurence(int[] nums, int low, int high, int target)
        {
            if (low > high) return -1;

            int mid = low + (high - low) / 2;

            if ((mid == nums.Length - 1 || target < nums[mid + 1]) && nums[mid] == target)
                return mid;

            else if (target < nums[mid])
                return LastOccurence(nums, low, (mid - 1), target);

            else
                return LastOccurence(nums, (mid + 1), high, target);

        }
        public int[] SearchRange(int[] nums, int target)
        {
            var first = FirstOccurence(nums, 0, nums.Length - 1, target);
            var last = LastOccurence(nums, 0, nums.Length - 1, target);
            return new int[] { first, last };
        }
    }
