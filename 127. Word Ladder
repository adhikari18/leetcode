//127. Word Ladder
//https://leetcode.com/problems/word-ladder/

    public class Solution
    {
        public int LadderLength(string beginWord, string endWord, IList<string> wordList)
        {
            int L = beginWord.Length;
            // Dictionary to hold combination of words that can be formed, from any given word. By changing one letter at a time.
            var allComboDict = new Dictionary<string, List<string>>();
            foreach (var word in wordList)
            {
                for (int i = 0; i < L; i++)
                {
                    // Key is the generic word // Value is a list of words which have the same intermediate generic word.
                    var newWord = $"{word.Substring(0, i)}*{word.Substring(i + 1, L - (i + 1))}";
                    List<string> transformations = allComboDict.ContainsKey(newWord) ? allComboDict[newWord] : new List<string>();
                    transformations.Add(word);
                    allComboDict[newWord] = transformations;
                }
            }

            var Q = new Queue<Tuple<string, int>>();
            Q.Enqueue(Tuple.Create(beginWord, 1));

            var visited = new HashSet<string>();
            visited.Add(beginWord);

            while (Q.Count > 0)
            {
                var node = Q.Dequeue();
                var word = node.Item1;
                int level = node.Item2;
                if (word.Equals(endWord))
                    return level;
                for (int i = 0; i < L; i++)
                {
                    // Intermediate words for current word
                    string newWord = $"{word.Substring(0, i)}*{word.Substring(i + 1, L - (i + 1))}";
                    if (!allComboDict.ContainsKey(newWord)) continue;
                    // Next states are all the words which share the same intermediate state.
                    foreach (string adjacentWord in allComboDict[newWord])
                    {
                        if (!visited.Contains(adjacentWord))
                        {
                            visited.Add(adjacentWord);
                            Q.Enqueue(Tuple.Create(adjacentWord, level + 1));
                        }
                    }
                }
            }
            return 0;
        }
    }
