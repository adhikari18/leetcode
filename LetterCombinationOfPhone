/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:
Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
*/
/*
Runtime: 240 ms, faster than 80.02% of C# online submissions for Letter Combinations of a Phone Number.
Memory Usage: 31 MB, less than 6.67% of C# online submissions for Letter Combinations of a Phone Number.
*/


    public class Solution
    {
        private readonly Dictionary<string, string> _map = new Dictionary<string, string>
                {
                    {"2", "abc"},
                    {"3", "def"},
                    {"4", "ghi"},
                    {"5", "jkl"},
                    {"6", "mno"},
                    {"7", "pqrs"},
                    {"8", "tuv"},
                    {"9", "wxyz"},
                };

        private readonly List<string> _output = new List<string>();

        public void Helper(string combination, string nextDigits)
        {
            if (nextDigits.Length == 0)
            {
                _output.Add(combination);
            }
            else
            {
                var digit = nextDigits.Substring(0, 1);
                var letters = _map.GetValueOrDefault(digit);
                for (var i = 0; i < letters.Length; i++)
                {
                    var letter = _map.GetValueOrDefault(digit).Substring(i, 1);
                    Helper(combination + letter, nextDigits.Substring(1));
                }
            }
        }

        public List<string> LetterCombinations(string digits)
        {
            if (digits.Length != 0)
                Helper("", digits);
            return _output;
        }
    }
