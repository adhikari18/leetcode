/*
https://leetcode.com/problems/coin-change
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
*/
/*
Runtime: 124 ms, faster than 57.12% of C# online submissions for Coin Change.
Memory Usage: 27.1 MB, less than 20.00% of C# online submissions for Coin Change.
*/

public class Solution
{
    public int CoinChange(int[] coins, int amount)
    {
        int m = coins.Length;
        var table = new int[amount + 1];
        table[0] = 0;
        for (var i = 1; i <= amount; i++)
        {
            table[i] = int.MaxValue;
        }
        for (var i = 1; i <= amount; i++)
        {
            for (var j = 0; j < m; j++)
            {
                if (coins[j] <= i)
                {
                    var subResult = table[i - coins[j]];
                    if (subResult != int.MaxValue && subResult + 1 < table[i])
                    {
                        table[i] = subResult + 1;
                    }
                }
            }
        }
        return table[amount] == int.MaxValue ? - 1: table[amount];

    }
}
