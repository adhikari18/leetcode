/*
146. LRU Cache
https://leetcode.com/problems/lru-cache
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
The cache is initialized with a positive capacity.
Follow up: Could you do both operations in O(1) time complexity?

*/
/*
***
https://www.youtube.com/watch?v=Hi5obC_CwIU
Moving data to front, adding data in front, removing data from last easily done with doubly linked list,
Get method with O(1) achieved by Dictionary
Combination of Dictionary to store key and linkedlist to store key value pair
***
*/
public class LRUCache {

    Node _head;
    Node _tail;
    Dictionary<int, Node> _nodeMap;
    int _capacity;
    
    public LRUCache(int capacity) {
        _head = new Node();
        _tail = new Node();
        _head.next = _tail;
        _tail.prev = _head;
        _capacity = capacity;
        _nodeMap = new Dictionary<int, Node>();
    }
    
    public int Get(int key) {
        var result= -1;
        if(_nodeMap.ContainsKey(key)){
            var node = _nodeMap[key];
            result = node.val;
            Remove(node);
            AddFirst(node);   
        }
        return result;
    }
    
    public void Put(int key, int value) {        
        if(_nodeMap.ContainsKey(key)){
            var node = _nodeMap[key];
            node.val = value;
            Remove(node);
            AddFirst(node);
        } else {
            if(_nodeMap.Count == _capacity){
                var lastOne = _tail.prev;
                _nodeMap.Remove(lastOne.key);
                Remove(lastOne);
            }
            var newNode = new Node();
            newNode.key = key;
            newNode.val = value;
            _nodeMap.Add(key, newNode);
            AddFirst(newNode);
        }
    }
    
    private void AddFirst(Node node){
        var headNext = _head.next;
        _head.next = node;
        node.prev = _head;
        node.next = headNext;
        headNext.prev = node;
    }
    
    private void Remove(Node node){
        Node nextNode = node.next;
        Node prevNode = node.prev;
        nextNode.prev = prevNode;
        prevNode.next = nextNode;
    }
}

public class Node{
    public int val{get;set;}
    public int key{get;set;}
    public Node prev{get;set;}
    public Node next{get;set;}
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.Get(key);
 * obj.Put(key,value);
 */
