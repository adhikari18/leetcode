/*
146. LRU Cache
https://leetcode.com/problems/lru-cache
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
*/
/*
https://www.youtube.com/watch?v=Hi5obC_CwIU
*/
/*
***
Moving data to front, adding data in front, removing data from last easily done with doubly linked list,
Get method with O(1) achieved by Dictionary
Combination of Dictionary to store key and linkedlist to store key value pair
***
*/

public class LRUCache {

    Node _head;
    Node _tail;
    Dictionary<int, Node> _nodeMap;
    int _capacity;
    
    public LRUCache(int capacity) {
        _head = new Node();
        _tail = new Node();
        _head.next = _tail;
        _tail.prev = _head;
        _capacity = capacity;
        _nodeMap = new Dictionary<int, Node>();
    }
    
    public int Get(int key) {
        var result= -1;
        if(_nodeMap.ContainsKey(key)){
            var node = _nodeMap[key];
            result = node.val;
            var prev = node.prev;
            var next = node.next;
            prev.next = next;
            next.prev = prev;
            Add(node);            
        }
        return result;
    }
    
    public void Put(int key, int value) {        
        if(_nodeMap.ContainsKey(key)){
            var node = _nodeMap[key];
            Remove(node);
            node.val = value;
            Add(node);
        } else {
            if(_nodeMap.Count == _capacity){
                var lastOne = _tail.prev;
                lastOne.prev.next = _tail;
                _tail.prev = lastOne.prev;
                _nodeMap.Remove(lastOne.key);
                Remove(lastOne);
            }
            var newNode = new Node();
            newNode.key = key;
            newNode.val = value;
            _nodeMap.Add(key, newNode);
            Add(newNode);
        }
    }
    
    private void Add(Node node){
        var headNext = _head.next;
        _head.next = node;
        node.prev = _head;
        node.next = headNext;
        headNext.prev = node;
    }
    
    private void Remove(Node node){
        Node nextNode = node.next;
        Node prevNode = node.prev;
        nextNode.prev = prevNode;
        prevNode.next = nextNode;
    }
}

public class Node{
    public int val{get;set;}
    public int key{get;set;}
    public Node prev{get;set;}
    public Node next{get;set;}
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.Get(key);
 * obj.Put(key,value);
 */
