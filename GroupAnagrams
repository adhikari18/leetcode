/*
Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.
*/
/*
Runtime: 296 ms, faster than 72.95% of C# online submissions for Group Anagrams.
Memory Usage: 40.2 MB, less than 5.88% of C# online submissions for Group Anagrams.
*/

public class Solution
    {
        public IList<IList<string>> GroupAnagrams(string[] strs)
        {
            var result = new List<IList<string>>();
            var dict = new Dictionary<string, List<int>>();
            for(var i = 0; i < strs.Length; i++)
            {
                var str = strs[i];
                str = string.Concat(str.OrderBy(c => c));
                if (dict.ContainsKey(str))
                {
                    var list = dict.GetValueOrDefault(str);
                    list.Add(i);
                    dict.Remove(str);
                    dict.Add(str, list);
                } else
                {
                    dict.Add(str, new List<int> { i });
                }
            }
            foreach(var key in dict.Keys)
            {
                var subResult = new List<string>();
                foreach(var ind in dict.GetValueOrDefault(key))
                {
                    subResult.Add(strs[ind]);
                }
                result.Add(subResult);
            }
            return result;
        }
    }
