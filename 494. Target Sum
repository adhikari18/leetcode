//https://leetcode.com/problems/target-sum
//494. Target Sum
//You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.
//Find out how many ways to assign symbols to make sum of integers equal to target S.

Recursion with Memoization
public class Solution
{
    public int FindTargetSumWays(int[] nums, int S)
    {
        var memo = new int[nums.Length][];
        for (var i = 0; i < memo.Length; i++)
        {
            memo[i] = new int[2001];
            Array.Fill(memo[i], int.MinValue);
        }
        return calculate(nums, 0, 0, S, memo);
    }
    public int calculate(int[] nums, int i, int sum, int S, int[][] memo)
    {
        if (i == nums.Length)
        {
            if (sum == S)
            {
                return 1;
            }
            return 0;
        }
        else
        {
            var col = sum + 1000;
            if (memo[i][col] != int.MinValue)
                return memo[i][col];
            var pos = calculate(nums, i + 1, sum + nums[i], S, memo);
            var neg = calculate(nums, i + 1, sum - nums[i], S, memo);
            memo[i][col] = pos + neg;
            return pos + neg;
        }
    }
}
// Time complexity, for range of sum is s. The overall time complexity is O(ns)

//DP approach
 public class Solution
    {
        public int FindTargetSumWays(int[] nums, int S)
        {
            if (nums == null || nums.Length < 1) return 0;
            int sum = 0;
            foreach (int num in nums) sum += num;
            return (sum < S || (sum + S) % 2 != 0) ? 0 : Helper(nums, (sum + S) / 2);
        }

        public int Helper(int[] nums, int target)
        {
            int[] dp = new int[target + 1];
            dp[0] = 1;
            for (int i = 0; i < nums.Length; i++)
            {
                for (int j = target; j >= nums[i]; j--)
                {
                    dp[j] += dp[j - nums[i]];
                }
            }
            return dp[target];
        }
    }
    
    /*
    The original problem statement is equivalent to: find the number of ways to gather a subset of nums that needs to be positive (P), and the rest negative (N), such that their sum is equal to target.
Therefore…
sum(P) - sum(N) = target
sum(P) - sum(N) + sum(P) + sum(N) = target + sum(P) + sum(N)
2 * sum(P) = target + sum(nums)
sum(P) = (target + sum(nums)) / 2
… the original problem statement may be converted into the following subset sum problem: find the number of ways to gather a subset of nums such that its sum is equal to (target + sum(nums)) / 2.
We can also add another trivial check to our algorithm: if target + sum(nums) is not divisible by 2, we can return 0 because there is no solution (this follows from the last line in our derivation above).
    */
