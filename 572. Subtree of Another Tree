//572. Subtree of Another Tree
//https://leetcode.com/problems/subtree-of-another-tree/

public class Solution {
    public bool IsSubtree(TreeNode s, TreeNode t) {
        if(s == null) return false;
        return IsSubtreeHelper(s, t) 
            || IsSubtree(s.left, t)
            || IsSubtree(s.right, t);
    }
    
    private bool IsSubtreeHelper(TreeNode s, TreeNode t)
    {
        if(s == null && t == null) return true;
        if(s == null || t == null) return false;
        if(s.val != t.val) return false;
        return IsSubtreeHelper(s.left, t.left) 
            && IsSubtreeHelper(s.right, t.right);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
