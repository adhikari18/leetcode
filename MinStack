/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/
/*
Runtime: 152 ms, faster than 30.37% of C# online submissions for Min Stack.
Memory Usage: 34.1 MB, less than 33.33% of C# online submissions for Min Stack.
*/
public class Element
    {
        public int Value { get; set; }
        public int Min { get; set; }
        public Element Next { get; set; }

        public Element(int val, int min)
        {
            this.Value = val;
            this.Min = min;
        }
    }
    public class MinStack
    {
        private Element top;

        /** initialize your data structure here. */
        public MinStack()
        {

        }

        public void Push(int x)
        {
            if (top == null)
            {
                top = new Element(x, x);
            }
            else
            {
                var element = new Element(x, Math.Min(x, top.Min))
                    { Next = top };
                top = element;
            }
        }

        public void Pop()
        {
            if (top == null) return;
            Element temp = top.Next;
            top.Next = null;
            top = temp;
        }

        public int Top()
        {
            if (top == null) return -1;
            return top.Value;

        }

        public int GetMin()
        {
            if (top == null) return -1;
            return top.Min;
        }
    }
