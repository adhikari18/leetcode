//198. House Robber
//https://leetcode.com/problems/house-robber/
//dp -> dp[i] = Max of dp[i-2]+num[i] and dp[i-1]

public class Solution {
    public int Rob(int[] nums) {
        if(nums == null || nums.Length == 0)
            return 0;
        if(nums.Length == 1)
            return nums[0];
        if(nums.Length == 2)
            return Math.Max(nums[0], nums[1]);
        
        int[] dp = new int[nums.Length];
        
        dp[0] = nums[0];
        dp[1] = Math.Max(nums[0], nums[1]);
        
        for(int i = 2; i < nums.Length; i++)
        {
            dp[i] = Math.Max(nums[i] + dp[i-2], dp[i-1]);
                        
            /*
            //Optimization for space
                maxVal = Math.Max(value0 + nums[i], value1);
                value0 = value1;
                value1 = maxVal;
            */
        }
        
        return dp[nums.Length - 1];
    }
}
