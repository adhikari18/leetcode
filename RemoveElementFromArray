/*
Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.
*/
/*
Runtime: 236 ms, faster than 98.16% of C# online submissions for Remove Element.
Memory Usage: 29.3 MB, less than 11.11% of C# online submissions for Remove Element.
*/
namespace Leetcode
{
    public class Solution
    {
        public int RemoveElement(int[] nums, int val)
        {
            int i = 0;
            int len = nums.Length;
            while (i < len)
            {
                if (nums[i] != val)
                {
                    i++;
                }
                else
                {
                    nums[i] = nums[len - 1];
                    len--;
                }
            }
            return len;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //var intArr = new int[] { 0,1,2,2,3,0,4,2 }; // 2
            var intArr = new int[] { 3,2,2,3 }; // 3
            //var intArr = new int[] {2}; //3
            var solution = new Solution();
            var result = solution.RemoveElement(intArr, 3);
        }
    }
}
