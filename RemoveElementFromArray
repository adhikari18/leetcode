/*
Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.
*/
/*
Runtime: 244 ms, faster than 92.14% of C# online submissions for Remove Element.
Memory Usage: 29 MB, less than 11.11% of C# online submissions for Remove Element.
*/
   public class Solution
    {
        public int RemoveElement(int[] nums, int val)
        {
            int i = 0;
            int len = nums.Length;
            while (i < len)
            {
                if (nums[i] == val)
                {
                    nums[i] = nums[len - 1];
                    len--;
                }
                else
                {
                    i++;
                }
            }
            return len;
        }
    }
