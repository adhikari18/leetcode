/*
63. Unique Paths II
https://leetcode.com/problems/unique-paths-ii/
unique paths with obstacle grid
*/

public class Solution
{
    public int UniquePathsWithObstacles(int[][] obstacleGrid)
    {
        var m = obstacleGrid.Length;
        if (m == 0 || obstacleGrid[0][0] == 1)
            return 0;
        var n = obstacleGrid[0].Length;

        obstacleGrid[0][0] = 1; // Number of ways of reaching the starting cell = 1.

        var dp = new int[n];
        dp[0] = 1;
        for (var i = 1; i < n; i++)
            dp[i] = (obstacleGrid[0][i] == 0 && dp[i - 1] == 1) ? 1 : 0;

        for (var i = 1; i < m; i++)
        {
            dp[0] = (obstacleGrid[i][0] == 0 && dp[0] == 1) ? 1 : 0;
            for (var j = 1; j < n; j++)
            {
                dp[j] = obstacleGrid[i][j] == 0 ? (dp[j] + dp[j - 1]) : 0;
            }
        }
        return dp[n - 1];
    }
}
