/*
63. Unique Paths II
https://leetcode.com/problems/unique-paths-ii/
*/
/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Note: m and n will be at most 100.

Example 1:

Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
*/

public class Solution
    {
        public int UniquePathsWithObstacles(int[][] obstacleGrid)
        {
            var rows = obstacleGrid.Length;
            var columns = obstacleGrid[0].Length;

            // If the starting cell has an obstacle, then simply return as there would be no paths to the destination.
            if (obstacleGrid[0][0] == 1)
            {
                return 0;
            }

            obstacleGrid[0][0] = 1; // Number of ways of reaching the starting cell = 1.

            
            for (var i = 1; i < rows; i++) // Filling the values for the first column
            {
                obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
            }

            for (var i = 1; i < columns; i++) // Filling the values for the first row
            {
                obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 && obstacleGrid[0][i - 1] == 1) ? 1 : 0;
            }

            // Starting from cell(1,1) fill up the values
            // No. of ways of reaching cell[i][j] = cell[i - 1][j] + cell[i][j - 1]
            // i.e. From above and left.
            for (var i = 1; i < rows; i++)
            {
                for (var j = 1; j < columns; j++)
                {
                    obstacleGrid[i][j] = obstacleGrid[i][j] == 0 ? obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1] : 0;
                }
            }

            // Return value stored in rightmost bottommost cell. That is the destination.
            return obstacleGrid[rows - 1][columns - 1];
        }
    }
