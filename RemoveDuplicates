/*
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
*/

/*
Runtime: 264 ms, faster than 79.02% of C# online submissions for Remove Duplicates from Sorted Array.
Memory Usage: 32.5 MB, less than 5.56% of C# online submissions for Remove Duplicates from Sorted Array.
*/

using System;
using System.Globalization;

namespace Leetcode
{
    public class Solution
    {
        public int RemoveDuplicates(int[] nums)
        {
            if (nums.Length <= 1)
            {
                return nums.Length;
            }
            var result = 0;
            for (int i = 0; i < nums.Length - 1; i++)
            {
                if (nums[i] != nums[i + 1])
                {
                    nums[result++] = nums[i];
                }
            }

            nums[result++] = nums[nums.Length - 1];

            return result;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //var intArr = new int[] { 1, 1, 2 };
            var intArr = new int[] { 0,0,1,1,1,2,2,3,3,4 };
            var solution = new Solution();
            var result = solution.RemoveDuplicates(intArr);
        }
    }
}
