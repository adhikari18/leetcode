/*
338. Counting Bits
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
*/
/*
Runtime: 216 ms, faster than 91.47% of C# online submissions for Counting Bits.
Memory Usage: 29 MB, less than 100.00% of C# online submissions for Counting Bits.
*/

public class Solution
{
    public int[] CountBits(int num)
    {
        int[] dp = new int[num + 1];
        int offset = 1;
        for (int i = 1; i < dp.Length; i++)
        {
            if (offset * 2 == i) offset = i;
            dp[i] = dp[i - offset] + 1;
        }
        return dp;
    }
}
