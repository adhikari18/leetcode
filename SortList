/*
https://leetcode.com/problems/sort-list/
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
*/
/*
If this problem does not have the constant space limitation, we can easily sort using a sorting method from framemwork. 
For constant space complexity => 
Break the list to two in the middle
Recursively sort the two sub lists
Merge the two sub lists
*/
/*
Runtime: 120 ms, faster than 39.46% of C# online submissions for Sort List.
Memory Usage: 30 MB, less than 16.67% of C# online submissions for Sort List.
*/

class Solution
    {
        public ListNode SortList(ListNode head)
        {
            if (head == null || head.next == null)
            {
                return head;
            }

            //partition the list
            ListNode p1 = head;
            ListNode firstEnd = GetFirstEnd(head);
            ListNode p2 = firstEnd.next;
            firstEnd.next = null;

            //sort each list
            p1 = SortList(p1);
            p2 = SortList(p2);

            //merge two lists
            return Merge(p1, p2);
        }

        //get the list partition point
        private ListNode GetFirstEnd(ListNode head)
        {
            ListNode p1 = head;
            ListNode p2 = head;
            while (p1 != null && p2 != null)
            {
                if (p2.next == null || p2.next.next == null)
                {
                    return p1;
                }

                p1 = p1.next;
                p2 = p2.next.next;
            }

            return head;
        }

        //merge two list
        private ListNode Merge(ListNode n1, ListNode n2)
        {
            ListNode head = new ListNode(0);
            ListNode p = head;
            ListNode p1 = n1;
            ListNode p2 = n2;
            while (p1 != null && p2 != null)
            {
                if (p1.val < p2.val)
                {
                    p.next = p1;
                    p1 = p1.next;
                }
                else
                {
                    p.next = p2;
                    p2 = p2.next;
                }

                p = p.next;
            }

            if (p1 != null)
            {
                p.next = p1;
            }

            if (p2 != null)
            {
                p.next = p2;
            }

            return head.next;
        }
    }
