/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
*/
/*
Runtime: 108 ms, faster than 10.21% of C# online submissions for Search in Rotated Sorted Array.
Memory Usage: 24.6 MB, less than 11.11% of C# online submissions for Search in Rotated Sorted Array.
*/

using System;
using System.Collections.Generic;

namespace LeetCode
{
    public class Solution
    {
        int SearchRecursion(int[] arr, int left, int right, int key)
        {
            if (left > right)
                return -1;

            int mid = (left + right) / 2;

            if (arr[mid] == key)
                return mid;

            if (arr[left] <= arr[mid])
            {
                if (key >= arr[left] && key <= arr[mid])
                    return SearchRecursion(arr, left, mid - 1, key);

                return SearchRecursion(arr, mid + 1, right, key);
            }

            if (key >= arr[mid] && key <= arr[right])
                return SearchRecursion(arr, mid + 1, right, key);

            return SearchRecursion(arr, left, mid - 1, key);
        }
        public int Search(int[] nums, int target)
        {
            return SearchRecursion(nums, 0, nums.Length - 1, target);

        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            var solution = new Solution();
            var input = new int[] { 4, 5, 6, 7, 0, 1, 2 };
            Console.WriteLine(solution.Search(input, 3));
        }
    }
}
