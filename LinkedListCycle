/*
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


 

Follow up:

Can you solve it using O(1) (i.e. constant) memory?

//This is from the solution using Slow and Fast pointer, this can solve it in constant memory.
public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
        return false;
    }
    ListNode slow = head;
    ListNode fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {
            return false;
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return true;
}

*/
/*
Runtime: 100 ms, faster than 73.90% of C# online submissions for Linked List Cycle.
Memory Usage: 25.6 MB, less than 7.14% of C# online submissions for Linked List Cycle.
*/
using System;
using System.Collections.Generic;

namespace Leetcode
{

    //Definition for singly-linked list.
    public class ListNode
    {
        public int val;
        public ListNode next;
        public ListNode(int x)
        {
            val = x;
            next = null;
        }
    }

    public class Solution
    {
        public bool HasCycle(ListNode head)
        {
            var nodesVisited = new HashSet<ListNode>();
            while (head != null)
            {
                if (nodesVisited.Contains(head))
                {
                    return true;
                }

                nodesVisited.Add(head);
                head = head.next;
            }
            return false;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var solution = new Solution();
            var result = solution.HasCycle(new ListNode(1));
            Console.WriteLine(result);
        }
    }
}
