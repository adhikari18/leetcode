/*
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.


*/
/*
Runtime: 96 ms, faster than 85.44% of C# online submissions for Maximum Depth of Binary Tree.
Memory Usage: 24.4 MB, less than 5.88% of C# online submissions for Maximum Depth of Binary Tree.
*/
using System;

namespace Leetcode
{
     /* Definition for a binary tree node. */
  public class TreeNode {
      public int val;
      public TreeNode left;
      public TreeNode right;
      public TreeNode(int x) { val = x; }
  }

  public class Solution
  {
      public int MaxDepth(TreeNode root)
      {
          if (root == null) return 0;
          int leftDepth = MaxDepth(root.left);
          int rightDepth = MaxDepth(root.right);
          return Math.Max(leftDepth, rightDepth) + 1;
      }
  }

    class Program
    {
        static void Main(string[] args)
        {
            TreeNode tree = new TreeNode(1) {left = new TreeNode(2), right = new TreeNode(3)};
            tree.left.left = new TreeNode(4);
            tree.left.right = new TreeNode(5);

            var solution = new Solution();
            var result = solution.MaxDepth(tree);
            Console.WriteLine(result);
        }
    }
}
