/*
169. Majority Element
https://leetcode.com/problems/majority-element/
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.
*/
public class Solution {
    public int MajorityElement(int[] nums) {
        Array.Sort(nums);
        return nums[nums.Length/2];
    }
}
//Time complexity - O(nLogn)
//space complexity O(1)


//Better solution in linear time: Boyer-Moore Voting Algorithm
public class Solution {
    public int MajorityElement(int[] nums) {
        var count = 0;
        var maj = nums[0];
        for(var i = 0; i < nums.Length; i++){
            if(count == 0)
                maj = nums[i];
            count = (maj == nums[i]) ? count + 1 : count-1;
        }
        return maj;
    }
}
//Time Complexity: O(n)
//Space: O(1)
