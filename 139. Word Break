/*
139. Word Break
https://leetcode.com/problems/word-break/
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
*/


/*
https://media.geeksforgeeks.org/wp-content/cdn-uploads/wordBreak1.png
https://www.youtube.com/watch?v=hLQYQ4zj0qg
 Two loops take O(nÂ²) time if we assume checking existence in wordDict only take O(1) time. We need O(n) extra space for the dp list.
*/

    public class Solution
    {
        public bool WordBreak(string s, IList<String> wordDict)
        {
            var dp = new bool[s.Length + 1];
            dp[0] = true;
            for (var len = 1; len <= s.Length; len++)
                for (var i = 0; i < len; i++)
                    if (dp[i] && wordDict.Contains(s.Substring(i, len-i)))
                    {
                        dp[len] = true;
                        break;
                    }
            return dp[s.Length];
        }
    }
