//138. Copy List with Random Pointer
//https://leetcode.com/problems/copy-list-with-random-pointer/

/*
// Definition for a Node.
public class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node(int _val) {
        val = _val;
        next = null;
        random = null;
    }
}
*/

public class Solution {
    public Node CopyRandomList(Node head) {
        if(head == null) return null;
        
       var map = new Dictionary<Node, Node>();
        Node curr = head;
        while (curr != null) {
            map.Add(curr, new Node(curr.val));
            curr = curr.next;
        }
        
        curr = head;
        while (curr != null) {
            map[curr].random = curr.random != null ? map[curr.random] : null;
            map[curr].next = curr.next != null ? map[curr.next] : null;
            curr = curr.next;
        }
        
        return map[head];
    }
}
