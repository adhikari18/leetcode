/*
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.
*/
/*
Runtime: 96 ms, faster than 89.69% of C# online submissions for Jump Game.
Memory Usage: 26.2 MB, less than 25.00% of C# online submissions for Jump Game.
*/


using System;
using System.Collections.Generic;

namespace LeetCode
{
    public class Solution
    {
        public bool CanJump(int[] nums)
        {
            if (nums.Length <= 1) return true;
            var max = nums[0];

            for(var i = 0; i < nums.Length; i++)
            {
                if (nums[i] + i > max) max = nums[i] + i;
                if (max <= i && nums[i] == 0) return false;
                if (max >= nums.Length - 1) return true;
            }

            return false;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            var solution = new Solution();
            var input = new int[] { 3, 0, 8, 2, 0, 0, 1 };
            var result = solution.CanJump(input);
            Console.WriteLine(result);
        }
    }
}
