/*
Combination Sum
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
*/

/*
Runtime: 244 ms, faster than 86.99% of C# online submissions for Combination Sum.
Memory Usage: 31.8 MB, less than 25.00% of C# online submissions for Combination Sum.
*/


using System;
using System.Collections.Generic;

namespace Leetcode
{
    class Solution
    {
        public List<IList<int>> CombinationSum(int[] candidates, int target)
        {
            List<IList<int>> results = new List<IList<int>>();

            if (candidates == null || candidates.Length == 0)
            {
                return results;
            }

            Array.Sort(candidates);

            List<int> combination = new List<int>();
            DFS(results, combination, candidates, target, 0);

            return results;
        }

        private void DFS(List<IList<int>> results, List<int> combination, int[] candidates, int target, int startIndex)
        {
            if (target == 0)
            {
                results.Add(new List<int>(combination));
                return;
            }

            for (int i = startIndex; i < candidates.Length; i++)
            {
                if (candidates[i] > target)
                {
                    break;
                }

                combination.Add(candidates[i]);
                DFS(results, combination, candidates, target - candidates[i], i);
                combination.RemoveAt(combination.Count - 1);
            }
        }
    }

    class CombinationSum
    {
        static void Main(string[] args)
        {
            var solution = new Solution();

            var result = solution.CombinationSum(new int[] { 2, 3, 6, 7 }, 7);
            Console.WriteLine(result);
        }
    }
}
