//48. Rotate Image
//https://leetcode.com/problems/rotate-image/
/*
 * clockwise rotate
 * first reverse up to down, then swap the symmetry by diagonal line
 * 1 2 3     7 8 9     7 4 1
 * 4 5 6  => 4 5 6  => 8 5 2
 * 7 8 9     1 2 3     9 6 3
 */
 
public class Solution 
{
    public void Rotate(int[][] matrix) 
    { 
        int rows = matrix.Length;
        int cols = matrix[0].Length;
        // Reverse top to down
        for (int i = 0; i < rows / 2; i++) 
        {
            for (int j = 0; j < cols; j++) 
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[rows-i-1][j];
                matrix[rows-i-1][j] = temp;
            }
        }
        // Swap the symmetry
        for (int i = 0; i < rows; i++) 
        {
            for (int j = i; j < cols; j++) 
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
    }
}


/*
 * anticlockwise rotate
 * first reverse left to right, then swap the symmetry
 * 1 2 3     3 2 1     3 6 9
 * 4 5 6  => 6 5 4  => 2 5 8
 * 7 8 9     9 8 7     1 4 7
 */
class Solution {
    public void anti_rotate(int[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return;
        }

        int rows = matrix.length;
        int cols = matrix[0].length;
        // Reverse left to right
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][cols-j-1];
                matrix[i][cols-j-1] = temp;
            }
        }
        // Swap the symmetry by diagonal line
        for (int i = 0; i < rows; i++) {
            for (int j = i; j < cols; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
    }
}
