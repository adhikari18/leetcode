/*
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.
*/
/*
Runtime: 72 ms, faster than 93.28% of C# online submissions for Valid Parentheses.
Memory Usage: 21.7 MB, less than 6.38% of C# online submissions for Valid Parentheses.
*/
    public class Solution
    {
        private static readonly char[] OpenBrackets = { '{', '[', '(' };
        private static readonly char[] ClosedBrackets = { '}', ']', ')' };

        public bool IsValid(string input)
        {
            var stack = new Stack<char>();
            var indexStack = new Stack<int>();
            int i;
            for (i = 0; i < input.Length; i++)
            {
                if (IsOpenBracket(input[i]))
                {
                    stack.Push(input[i]);
                    indexStack.Push(i);
                }
                else if (IsClosedBracket(input[i]))
                {
                    if (stack.Count == 0)
                    {
                        return false;
                    }
                    var openCounterpart = OpenBrackets[Array.IndexOf(ClosedBrackets, input[i])];
                    if (stack.Pop() != openCounterpart)
                    {
                        return false;
                    }
                    indexStack.Pop();
                }
            }

            return stack.Count > 0 ? false : true;
        }

        private static bool IsOpenBracket(char ch)
        {
            return OpenBrackets.Contains(ch);
        }

        private static bool IsClosedBracket(char ch)
        {
            return ClosedBrackets.Contains(ch);
        }
    }
