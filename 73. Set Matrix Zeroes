/*
https://leetcode.com/problems/set-matrix-zeroes/submissions/
73. Set Matrix Zeroes
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.
Follow up:
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
*/

//Approach 1 with 2 hashsets for row and col
public class Solution {
    public void SetZeroes(int[][] matrix) {
        var rows = new HashSet<int>();
        var cols = new HashSet<int>();
        for(var i = 0; i < matrix.Length; i++)
            for(var j = 0; j < matrix[0].Length; j++)
            {
                if(matrix[i][j] == 0){
                    rows.Add(i);
                    cols.Add(j);
                }
            }        
        for(var i = 0; i < matrix.Length; i++)
            for(var j = 0; j < matrix[0].Length; j++)
            {
                if(rows.Contains(i) || cols.Contains(j)){
                    matrix[i][j] = 0;
                }
            }
    }
}

//Approach 2 -> 
    class Solution
    {
        public void SetZeroes(int[][] matrix)
        {
            var MODIFIED = -1000000;
            var rows = matrix.Length;
            var columns = matrix[0].Length;

            for (var r = 0; r < rows; r++)
            {
                for (var c = 0; c < columns; c++)
                {
                    if (matrix[r][c] == 0)
                    {
                        // We modify the corresponding rows and column elements in place.
                        // Note, we only change the non zeroes to MODIFIED
                        for (var k = 0; k < columns; k++)
                        {
                            if (matrix[r][k] != 0)
                            {
                                matrix[r][k] = MODIFIED;
                            }
                        }
                        for (var k = 0; k < rows; k++)
                        {
                            if (matrix[k][c] != 0)
                            {
                                matrix[k][c] = MODIFIED;
                            }
                        }
                    }
                }
            }

            for (var r = 0; r < rows; r++)
            {
                for (var c = 0; c < columns; c++)
                {
                    // Make a second pass and change all MODIFIED elements to 0 """
                    if (matrix[r][c] == MODIFIED)
                    {
                        matrix[r][c] = 0;
                    }
                }
            }
        }
    }
