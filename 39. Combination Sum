//39. Combination Sum
//https://leetcode.com/problems/combination-sum/

using System;
using System.Collections.Generic;

namespace Leetcode
{
    public class Solution
{
    public IList<IList<int>> CombinationSum(int[] candidates, int target)
    {
        var result = new List<IList<int>>();
        Array.Sort(candidates);
        Backtrack(result, candidates, new List<int>(), target, 0);
        return result;
    }

    private void Backtrack(IList<IList<int>> result, int[] candidates, List<int> current, int target, int index)
    {
        if (target == 0)
            result.Add(new List<int>(current));
        else
        {
            for (var i = index; i < candidates.Length; i++)
            {
                if (target < candidates[i]) break;

                current.Add(candidates[i]);
                Backtrack(result, candidates, current, target - candidates[i], i);
                current.RemoveAt(current.Count - 1);
            }
        }
    }
}

    class CombinationSum
    {
        static void Main(string[] args)
        {
            var solution = new Solution();
            var result = solution.CombinationSum(new int[] { 2, 3, 6, 7 }, 7);
            Console.WriteLine(result);
        }
    }
}
